#pragma once
#include <string>

typedef unsigned char      byte1;
typedef unsigned short     byte2;
typedef unsigned int       byte4;
typedef unsigned long long byte8;

// В формате PNG определено 4 типа стандартных блоков,
// иначе именуемых критические блоки,
// которые должны поддерживаться любой программой чтения и записи PNG.
class PNG_Image{
private:
    // Подпись PNG длиной в 8 байт содержит информацию для определения файла или потока данных, в согласии со спецификацией PNG
    struct sng
    {
        byte1 *Signature;  // Идентификатор (всегда 89504E470D0A1A0A)
    } _sng;

    // После подписи следуют 3 или более блоков данных PNG. Все блоки PNG имеют одинаковый основной формат и могут содержать переменное количество данных.
    struct Chunk{
        byte4 DataLength;   // Размер поля данных в байтах
        byte4 Type;         // Код, идентифицирующий тип блока
        byte1 *Data;        // Собственно данные, хранящиеся в блоке. Это поле может иметь нулевую длину, если не существует связанных с ним данных.
        byte4 Crc;          // CRC-32 значение полей Type и Data
        // Crc - CRC-32 значение, просчитываемое для полей Type и Data.
        // Это значение используется для определения, являются ли данные повреждёнными.
        // В PNG используется алгоритм CRC, определённый в ISO 3309 и ITU-T V.42.
    }CHNK;

    // Заголовочный блок (IHDR)
    // Заголовочный блок содержит информацию о данных изображения в PNG файле.
    // Этот блок должен быть первым блоком в потоке данных PNG и следует непосредственно за подписью PNG.
    // Область данных заголовочного блока составляет 13 байт (не допускается более одного заголовочного блока).
    struct IHDR{
        byte4 Width;         // Ширина изображения в пикселях
        byte4 Height;        // Высота изображения в пикселях
        byte1 BitDepth;      // Количество битов на пиксель и образец
        // У индексированных изображений BitDepth может принимать значения 1, 2, 4 и 8.
        // У чёрно-белых - 1, 2, 4, 8 и 16.
        // У полноцветных изображений без альфа данных, а также у чёрно-белых изображений с альфа данными, BitDepth может принимать только значения 8 и 16.
        byte1 ColorType;     // Индикатор интерпретации цвета
        // Принимаемые значения (вид изображения):
            // 0 (чёрно-белое), 2 (полноцветное), 3 (индексированное изображение), 4 (чёрно-белое с альфа данными) и 6 (полносветное с альфа данными).
        byte1 Compression;   // Индикатор типа сжатия
        // В настоящее время единственное допустимое значение - 0, означающее, что использован метод сжатия Defalte.
        byte1 Filter;        // Индикатор типа фильтра
        // На сегодняшний день, единственное допустимое значение - 0, означающее, что был применён метод фильтрования adaptive.
        byte1 Interlace;     // Тип использованной схемы чересстрочной развёртки
        // Принимаемые значения - 0 (нет чересстрочности) и 1 (чересстрочность Adam7)
    };

    // Блок палитры (PLTE)
    // Палитра несёт в себе данные таблицы цветов, связанный с данными изображения.
    // Этот блок присутствует только если данные изображения используют палитру и должен находиться перед этими данными.
    // Палитра (PLTE) всегда присутствует в потоках данных PNG, содержащих изображения с индексированными цветами (когда поле Color заголовочного блока имеет значение 3).
    struct _PLTEChunkEntry{
        byte1 Red;    /* Красный компонент (0 = чёрный, 255 = максимум оттенка) */
        byte1 Green;  /* Зелёный компонент (0 = чёрный, 255 = максимум оттенка) */
        byte1 Blue;   /* Синий компонент   (0 = чёрный, 255 = максимум оттенка) */
    };
    // PLTEChunk - массив, содержащий от 1 до 256 элементов, каждый из которых содержит 3 поля: Red, Green и Blue,
    // хранящие соответственно значения красного, зелёного и синего цветов для данного элемента палитры.
    _PLTEChunkEntry *PLTEChunk;

    // Данные изображения (IDAT)
    // Блок данных изображения содержит в себе само изображение, и допускается несколько таких блоков в потоке данных, причём все они должны вплотную примыкать друг к другу.
    // блок данных изображения (IDAT) содержит собственно данные изображения. В соответствии со спецификацией PNG эти данные всегда хранятся в сжатом виде.
    // Данные изображения могут быть разбиты на несколько IDAT блоков, чтобы программе записи PNG было легче буферизировать сжатые данные изображения.
    // У сжатого потока данных нет пределов, потому IDAT блок может быть в размере от 0 до 231-1 байт.

    // Замыкающий блок изображения (IEND)
    // Замыкающий блок изображения должен находиться в конце файла или потока данных PNG.
    // Этот блок не содержит никаких данных.
public:
    PNG_Image(const std::string fileName);
    ~PNG_Image();
};